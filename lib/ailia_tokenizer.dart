// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Written for the FFI article
class ailiaTokenizerFFI {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ailiaTokenizerFFI(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ailiaTokenizerFFI.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// \~japanese
  /// @brief ネットワークオブジェクトを作成します。
  /// @param net ネットワークオブジェクトポインタへのポインタ
  /// @param env_id 計算に利用する推論実行環境のID( ailiaGetEnvironment() で取得)  \ref AILIA_ENVIRONMENT_ID_AUTO
  /// にした場合は自動で選択する
  /// @param num_thread スレッド数の上限(  \ref AILIA_MULTITHREAD_AUTO  にした場合は自動で設定)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ネットワークオブジェクトを作成します。
  /// 推論実行環境を自動にした場合はCPUモードになり、BLASが利用できる場合はBLASを利用します。
  /// なお、BLASを利用する場合num_threadは無視される場合があります。
  ///
  /// \~english
  /// @brief Creates a network instance.
  /// @param net A pointer to the network instance pointer
  /// @param env_id The ID of the inference backend used for computation (obtained by  ailiaGetEnvironment() ). It is
  /// selected automatically if  \ref AILIA_ENVIRONMENT_ID_AUTO  is specified.
  /// @param num_thread The upper limit on the number of threads (It is set automatically if  \ref AILIA_MULTITHREAD_AUTO
  /// is specified.)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Creates a network instance.
  /// If the inference backend is set to automatic, CPU mode is used, while if BLAS is available, it uses BLAS.
  /// Note that if BLAS is used, num_thread may be ignored.
  int ailiaCreate(
    ffi.Pointer<ffi.Pointer<AILIANetwork>> net,
    int env_id,
    int num_thread,
  ) {
    return _ailiaCreate(
      net,
      env_id,
      num_thread,
    );
  }

  late final _ailiaCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<AILIANetwork>>, ffi.Int,
              ffi.Int)>>('ailiaCreate');
  late final _ailiaCreate = _ailiaCreatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<AILIANetwork>>, int, int)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトを初期化します。(ファイルから読み込み)
  /// @param net ネットワークオブジェクトポインタ
  /// @param path prototxtファイルのパス名(MBSC or UTF16)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ファイルから読み込み、ネットワークオブジェクトを初期化します。
  ///
  /// \~english
  /// @brief Initializes the network instance. (Read from file)
  /// @param net A network instance pointer
  /// @param path The path name to the prototxt file (MBSC or UTF16)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function reads the network instance from a file and initializes it.
  int ailiaOpenStreamFileA(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ailiaOpenStreamFileA(
      net,
      path,
    );
  }

  late final _ailiaOpenStreamFileAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Char>)>>('ailiaOpenStreamFileA');
  late final _ailiaOpenStreamFileA = _ailiaOpenStreamFileAPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Char>)>();

  int ailiaOpenStreamFileW(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Int> path,
  ) {
    return _ailiaOpenStreamFileW(
      net,
      path,
    );
  }

  late final _ailiaOpenStreamFileWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Int>)>>('ailiaOpenStreamFileW');
  late final _ailiaOpenStreamFileW = _ailiaOpenStreamFileWPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Int>)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトを初期化します。(ユーザ定義ファイルアクセスコールバック)
  /// @param net ネットワークオブジェクトポインタ
  /// @param fopen_args  \ref AILIA_USER_API_FOPEN に通知される引数ポインタ
  /// @param callback ユーザ定義ファイルアクセスコールバック関数構造体
  /// @param version ファイルアクセスコールバック関数構造体のバージョン( \ref AILIA_FILE_CALLBACK_VERSION )
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ファイルから読み込み、ネットワークオブジェクトを初期化します。
  ///
  /// \~english
  /// @brief Initializes the network instance. (User-defined file access callback)
  /// @param net A network instance pointer
  /// @param fopen_args An argument pointer supplied by AILIA_USER_API_FOPEN
  /// @param callback A struct for the user-defined file access callback function
  /// @param version The version of the struct for the file access callback function ( \ref AILIA_FILE_CALLBACK_VERSION )
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function reads the network instance from a file and initializes it.
  int ailiaOpenStreamEx(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> fopen_args,
    ailiaFileCallback callback,
    int version,
  ) {
    return _ailiaOpenStreamEx(
      net,
      fopen_args,
      callback,
      version,
    );
  }

  late final _ailiaOpenStreamExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
              ailiaFileCallback, ffi.Int)>>('ailiaOpenStreamEx');
  late final _ailiaOpenStreamEx = _ailiaOpenStreamExPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
          ailiaFileCallback, int)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトを初期化します。(メモリから読み込み)
  /// @param net ネットワークオブジェクトポインタ
  /// @param buf prototxtファイルのデータへのポインタ
  /// @param buf_size prototxtファイルのデータサイズ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// メモリから読み込み、ネットワークオブジェクトを初期化します。
  ///
  /// \~english
  /// @brief Initializes the network instance. (Read from memory)
  /// @param net A network instance pointer
  /// @param buf A pointer to the data in the prototxt file
  /// @param buf_size The data size of the prototxt file
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function reads the network instance from memory and initializes it.
  int ailiaOpenStreamMem(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> buf,
    int buf_size,
  ) {
    return _ailiaOpenStreamMem(
      net,
      buf,
      buf_size,
    );
  }

  late final _ailiaOpenStreamMemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt)>>('ailiaOpenStreamMem');
  late final _ailiaOpenStreamMem = _ailiaOpenStreamMemPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>, int)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトに重み係数を読み込みます。(ファイルから読み込み)
  /// @param net ネットワークオブジェクトポインタ
  /// @param path protobuf/onnxファイルのパス名(MBSC or UTF16)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ファイルからネットワークオブジェクトに重み係数を読み込みます。
  ///
  /// \~english
  /// @brief Reads weights into a network instance. (Read from file)
  /// @param net A network instance pointer
  /// @param path The path name to the protobuf/onnx file (MBSC or UTF16)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function reads weights into the network instance from a file.
  int ailiaOpenWeightFileA(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ailiaOpenWeightFileA(
      net,
      path,
    );
  }

  late final _ailiaOpenWeightFileAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Char>)>>('ailiaOpenWeightFileA');
  late final _ailiaOpenWeightFileA = _ailiaOpenWeightFileAPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Char>)>();

  int ailiaOpenWeightFileW(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Int> path,
  ) {
    return _ailiaOpenWeightFileW(
      net,
      path,
    );
  }

  late final _ailiaOpenWeightFileWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Int>)>>('ailiaOpenWeightFileW');
  late final _ailiaOpenWeightFileW = _ailiaOpenWeightFileWPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Int>)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトに重み係数を読み込みます。(ユーザ定義ファイルアクセスコールバック)
  /// @param net ネットワークオブジェクトポインタ
  /// @param fopen_args  \ref AILIA_USER_API_FOPEN に通知される引数ポインタ
  /// @param callback ユーザ定義ファイルアクセスコールバック関数構造体
  /// @param version ファイルアクセスコールバック関数構造体のバージョン( \ref AILIA_FILE_CALLBACK_VERSION )
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ファイルからネットワークオブジェクトに重み係数を読み込みます。
  ///
  /// \~english
  /// @brief Reads weights into a network instance. (User-defined file access callback)
  /// @param net A network instance pointer
  /// @param fopen_args An argument pointer supplied by AILIA_USER_API_FOPEN
  /// @param callback A struct for the user-defined file access callback function
  /// @param version The version of the struct for the file access callback function ( \ref AILIA_FILE_CALLBACK_VERSION )
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function reads weights into the network instance from a file.
  int ailiaOpenWeightEx(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> fopen_args,
    ailiaFileCallback callback,
    int version,
  ) {
    return _ailiaOpenWeightEx(
      net,
      fopen_args,
      callback,
      version,
    );
  }

  late final _ailiaOpenWeightExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
              ailiaFileCallback, ffi.Int)>>('ailiaOpenWeightEx');
  late final _ailiaOpenWeightEx = _ailiaOpenWeightExPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
          ailiaFileCallback, int)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトに重み係数を読み込みます。(メモリから読み込み)
  /// @param net ネットワークオブジェクトポインタ
  /// @param buf protobuf/onnxファイルのデータへのポインタ
  /// @param buf_size protobuf/onnxファイルのデータサイズ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// メモリからネットワークオブジェクトに重み係数を読み込みます。
  ///
  /// \~english
  /// @brief Reads weights into a network instance. (Read from memory)
  /// @param net A network instance pointer
  /// @param buf A pointer to the data in the protobuf/onnx file
  /// @param buf_size The data size of the protobuf/onnx file
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function reads weights into the network instance from memory.
  int ailiaOpenWeightMem(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> buf,
    int buf_size,
  ) {
    return _ailiaOpenWeightMem(
      net,
      buf,
      buf_size,
    );
  }

  late final _ailiaOpenWeightMemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt)>>('ailiaOpenWeightMem');
  late final _ailiaOpenWeightMem = _ailiaOpenWeightMemPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>, int)>();

  /// \~japanese
  /// @brief ネットワークオブジェクトを破棄します。
  /// @param net ネットワークオブジェクトポインタ
  ///
  /// \~english
  /// @brief It destroys the network instance.
  /// @param net A network instance pointer
  void ailiaDestroy(
    ffi.Pointer<AILIANetwork> net,
  ) {
    return _ailiaDestroy(
      net,
    );
  }

  late final _ailiaDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<AILIANetwork>)>>(
          'ailiaDestroy');
  late final _ailiaDestroy =
      _ailiaDestroyPtr.asFunction<void Function(ffi.Pointer<AILIANetwork>)>();

  /// \~japanese
  /// @brief 推論時の入力データの形状を変更します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 入力データの形状情報
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// prototxtで定義されている入力形状を変更します。
  /// prototxtに記述されているランクと同じにする必要があります。
  /// なお、重み係数の形状が入力形状に依存しているなどによりエラーが返る場合があります。
  /// prototxtで定義されているランクが4次元未満の場合は未使用の要素に1を設定する必要があります。
  /// prototxtで定義されているランクが5次元以上の場合は ailiaSetInputShapeND() を利用してください。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Changes the shape of the input data during inference.
  /// @param net A network instance pointer
  /// @param shape Shape information for the input data
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function changes the input shape defined in prototxt.
  /// The shape must have the same rank as the one contained in prototxt.
  /// Note that an error may be returned if the weights are dependent on the input shapes, among other reasons.
  /// The dimension of shape that defined in prototxt is less than 4, the unused element must be set to 1.
  /// The dimension of shape that defined in prototxt has 5 or more, please use  ailiaSetInputShapeND().
  /// This API can be call after call ailiaOpenWeighXXX()
  int ailiaSetInputShape(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<AILIAShape> shape,
    int version,
  ) {
    return _ailiaSetInputShape(
      net,
      shape,
      version,
    );
  }

  late final _ailiaSetInputShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>,
              ffi.UnsignedInt)>>('ailiaSetInputShape');
  late final _ailiaSetInputShape = _ailiaSetInputShapePtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>, int)>();

  /// \~japanese
  /// @brief 推論時の入力データの形状を変更します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 入力データの各次元の大きさの配列(dim-1, dim-2, ... ,1, 0)
  /// @param dim shapeの次元
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// prototxtで定義されている入力形状を変更します。
  /// prototxtに記述されているランクと同じにする必要があります。
  /// なお、重み係数の形状が入力形状に依存しているなどによりエラーが返る場合があります。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Changes the shape of the input data during inference.
  /// @param net A network instance pointer
  /// @param shape An array of shape that contains size of each axis (dim-1, dim-2, ... ,1, 0)
  /// @param dim The size of shape.
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function changes the input shape defined in prototxt.
  /// The shape must have the same rank as the one contained in prototxt.
  /// Note that an error may be returned if the weights are dependent on the input shapes, among other reasons.
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaSetInputShapeND(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> shape,
    int dim,
  ) {
    return _ailiaSetInputShapeND(
      net,
      shape,
      dim,
    );
  }

  late final _ailiaSetInputShapeNDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('ailiaSetInputShapeND');
  late final _ailiaSetInputShapeND = _ailiaSetInputShapeNDPtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>, int)>();

  /// \~japanese
  /// @brief 推論時の入力データの形状を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 入力データの形状情報
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、5次元以上の場合 \ref AILIA_STATUS_NDIMENSION_SHAPE 、
  /// 形状の一部が未確定の場合 \ref AILIA_STATUS_UNSETTLED_SHAPE 、それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// 形状が5次元以上の場合は ailiaGetInputDim() 、 ailiaGetInputShapeND() を利用してください。
  /// 形状の一部が未確定の場合、該当する次元の値は0となり、それ以外の次元の値は有効な値が格納されます。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the shape of the input data during inference.
  /// @param net A network instance pointer
  /// @param shape Shape information for the input data
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS .
  /// If shape has 5 or more dimension, it returns  \ref AILIA_STATUS_NDIMENSION_SHAPE .
  /// And if shape is not seattled, it returns \ref AILIA_STATUS_UNSETTLED_SHAPE , or an error code otherwise.
  /// @details
  /// When dimension of shape is 5 or more, please use  ailiaGetInputDim() and  ailiaGetInputShapeND().
  /// When shape is not settled, this function stores 0 at unsettled dimension and otherwise stores valid value.
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetInputShape(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<AILIAShape> shape,
    int version,
  ) {
    return _ailiaGetInputShape(
      net,
      shape,
      version,
    );
  }

  late final _ailiaGetInputShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>,
              ffi.UnsignedInt)>>('ailiaGetInputShape');
  late final _ailiaGetInputShape = _ailiaGetInputShapePtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>, int)>();

  /// \~japanese
  /// @brief 推論時の入力データの次元を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param dim 入力データの次元の格納先
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the dimension of the input data during inference.
  /// @param net A network instance pointer
  /// @param dim The storage location of the dimension
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetInputDim(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> dim,
  ) {
    return _ailiaGetInputDim(
      net,
      dim,
    );
  }

  late final _ailiaGetInputDimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ailiaGetInputDim');
  late final _ailiaGetInputDim = _ailiaGetInputDimPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief 推論時の入力データの形状を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 入力データの各次元の大きさの格納先配列(dim-1, dim-2, ... ,1, 0順で格納)
  /// @param dim shapeの次元
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、形状の一部が未確定の場合 \ref AILIA_STATUS_UNSETTLED_SHAPE 、
  /// それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// 形状の一部が未確定の場合、該当する次元の値は0となり、それ以外の次元の値は有効な値が格納されます。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the shape of the input data during inference.
  /// @param net A network instance pointer
  /// @param shape The storage location of the shape array. (It stores dim-1, dim-2, ... ,1, 0 order.)
  /// @param dim The size of shape
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS .
  /// And if shape is not seattled, it returns  \ref AILIA_STATUS_UNSETTLED_SHAPE , or an error code otherwise.
  /// @details
  /// When shape is not settled, this function stores 0 at unsettled dimension and otherwise stores valid value.
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetInputShapeND(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> shape,
    int dim,
  ) {
    return _ailiaGetInputShapeND(
      net,
      shape,
      dim,
    );
  }

  late final _ailiaGetInputShapeNDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('ailiaGetInputShapeND');
  late final _ailiaGetInputShapeND = _ailiaGetInputShapeNDPtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>, int)>();

  /// \~japanese
  /// @brief 推論時の出力データの形状を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 出力データの形状情報
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、5次元以上の場合 \ref AILIA_STATUS_NDIMENSION_SHAPE 、
  /// それ以外のエラーの場合エラーコードを返す。
  /// 形状が5次元以上の場合は ailiaGetOutputDim() 、 ailiaGetOutputShapeND() を利用してください。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the shape of the output data during inference.
  /// @param net A network instance pointer
  /// @param shape Shape information of the output data
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS .
  /// And if shape has 5 or more dimension, it returns  \ref AILIA_STATUS_NDIMENSION_SHAPE , or an error code otherwise.
  /// @details
  /// When dimension of shape is 5 or more, please use  ailiaGetOutputDim() () and  ailiaGetOutputShapeND().
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetOutputShape(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<AILIAShape> shape,
    int version,
  ) {
    return _ailiaGetOutputShape(
      net,
      shape,
      version,
    );
  }

  late final _ailiaGetOutputShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>,
              ffi.UnsignedInt)>>('ailiaGetOutputShape');
  late final _ailiaGetOutputShape = _ailiaGetOutputShapePtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>, int)>();

  /// \~japanese
  /// @brief 推論時の出力データの次元を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param dim 出力データの次元の格納先
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the dimension of the output data during inference.
  /// @param net A network instance pointer
  /// @param dim The storage location of the dimension
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetOutputDim(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> dim,
  ) {
    return _ailiaGetOutputDim(
      net,
      dim,
    );
  }

  late final _ailiaGetOutputDimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ailiaGetOutputDim');
  late final _ailiaGetOutputDim = _ailiaGetOutputDimPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief 推論時の出力データの形状を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 出力データの各次元の大きさの格納先配列(dim-1, dim-2, ... ,1, 0順で格納)
  /// @param dim shapeの次元
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the shape of the output data during inference.
  /// @param net A network instance pointer
  /// @param shape The storage location of the shape array. (It stores dim-1, dim-2, ... ,1, 0 order.)
  /// @param dim The size of shape
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetOutputShapeND(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> shape,
    int dim,
  ) {
    return _ailiaGetOutputShapeND(
      net,
      shape,
      dim,
    );
  }

  late final _ailiaGetOutputShapeNDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('ailiaGetOutputShapeND');
  late final _ailiaGetOutputShapeND = _ailiaGetOutputShapeNDPtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>, int)>();

  /// \~japanese
  /// @brief 推論を行い推論結果を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param dest 推論結果の書き出し先バッファにX,Y,Z,Wの順でnumeric型で格納  サイズはネットファイルのoutputSizeとなる
  /// @param dest_size 推論結果の書き出し先バッファのbyte数
  /// @param src 推論データ X,Y,Z,Wの順でnumeric型で格納 サイズはネットファイルのinputSizeとなる
  /// @param src_size 推論データのbyte数
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Performs the inferences and provides the inference result.
  /// @param net A network instance pointer
  /// @param dest The result is stored in the inference result destination buffer as numeric type data in the order of X,
  /// Y, Z, and W. The buffer has the same size as the network file outputSize.
  /// @param dest_size The number of bytes for the destination buffer for the inference result
  /// @param src The input is stored as numeric type data in the order of the inference data X, Y, Z, and W. The input has
  /// the same size as the network file inputSize.
  /// @param src_size The number of bytes of the inference data
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaPredict(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> dest,
    int dest_size,
    ffi.Pointer<ffi.Void> src,
    int src_size,
  ) {
    return _ailiaPredict(
      net,
      dest,
      dest_size,
      src,
      src_size,
    );
  }

  late final _ailiaPredictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt)>>('ailiaPredict');
  late final _ailiaPredict = _ailiaPredictPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Void>, int)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)の数を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param blob_count blobの数の格納先
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  /// なお、ailiaOpenStreamXXX呼び出し時は入出力Blobのみが列挙され、ailiaOpneWeightXXX呼び出し時に中間Blobの列挙が行われます。
  /// そのためailiaOpenStreamXXX呼び出し直後とailiaOpneWeightXXX呼び出し直後で返答する数が変わる場合があります。
  ///
  /// \~english
  /// @brief Gets the amount of internal data (blob) during inference.
  /// @param net A network instance pointer
  /// @param blob_count Storage location of the number of blobs
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  /// In addition, this api returuns number of sum of inputs and outputs when after call ailiaOpenStreamXXX.
  /// And, when call ailiaOpenWeightXXX, enumerate and optimzie intermediate blobs.
  /// So, this api may return more count after call ailiaOpenWeightXXX.
  int ailiaGetBlobCount(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> blob_count,
  ) {
    return _ailiaGetBlobCount(
      net,
      blob_count,
    );
  }

  late final _ailiaGetBlobCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ailiaGetBlobCount');
  late final _ailiaGetBlobCount = _ailiaGetBlobCountPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)の形状を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape データの形状情報の格納先
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、5次元以上の場合 \ref AILIA_STATUS_NDIMENSION_SHAPE 、
  /// それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// 形状が5次元以上の場合は ailiaGetBlobDim() 、 ailiaGetBlobShapeND() を利用してください。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the shape of the internal data (blob) during inference.
  /// @param net A network instance pointer
  /// @param shape Storage location of the data shape information
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS .
  /// And if shape has 5 or more dimension, it returns  \ref AILIA_STATUS_NDIMENSION_SHAPE , or an error code otherwise.
  /// @details
  /// When dimension of shape is 5 or more, please use  ailiaGetBlobDim() and  ailiaGetBlobShapeND().
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetBlobShape(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<AILIAShape> shape,
    int blob_idx,
    int version,
  ) {
    return _ailiaGetBlobShape(
      net,
      shape,
      blob_idx,
      version,
    );
  }

  late final _ailiaGetBlobShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('ailiaGetBlobShape');
  late final _ailiaGetBlobShape = _ailiaGetBlobShapePtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>, int, int)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)の次元を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param dim blobの次元の格納先
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the dimension of the internal data (blob) during inference.
  /// @param net A network instance pointer
  /// @param dim The storage location of the dimension
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetBlobDim(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> dim,
    int blob_idx,
  ) {
    return _ailiaGetBlobDim(
      net,
      dim,
      blob_idx,
    );
  }

  late final _ailiaGetBlobDimPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('ailiaGetBlobDim');
  late final _ailiaGetBlobDim = _ailiaGetBlobDimPtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>, int)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)の形状を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape blobの各次元の大きさの格納先配列(dim-1, dim-2, ... ,1, 0順で格納)
  /// @param dim shapeの次元
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、それ以外のエラーの場合はエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the amount of internal data (blob) during inference.
  /// @param net A network instance pointer
  /// @param shape The storage location of the shape array. (It stores dim-1, dim-2, ... ,1, 0 order.)
  /// @param dim The size of shape
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetBlobShapeND(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> shape,
    int dim,
    int blob_idx,
  ) {
    return _ailiaGetBlobShapeND(
      net,
      shape,
      dim,
      blob_idx,
    );
  }

  late final _ailiaGetBlobShapeNDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('ailiaGetBlobShapeND');
  late final _ailiaGetBlobShapeND = _ailiaGetBlobShapeNDPtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>, int, int)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param dest 推論結果の書き出し先バッファにX,Y,Z,Wの順でnumeric型で格納
  /// @param dest_size 推論結果の書き出し先バッファのbyte数
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ailiaPredict() または ailiaUpdate() を一度も実行していない場合は \ref AILIA_STATUS_INVALID_STATE が返ります。
  ///
  /// \~english
  /// @brief Gets the internal data (blob) during inference.
  /// @param net A network instance pointer
  /// @param dest The result is stored in the inference result destination buffer as numeric type data in the order of X,
  /// Y, Z, and W.
  /// @param dest_size The number of bytes for the inference result destination buffer
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// If  ailiaPredict()  or  ailiaUpdate()  is not run at all, the function returns  \ref AILIA_STATUS_INVALID_STATE .
  int ailiaGetBlobData(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> dest,
    int dest_size,
    int blob_idx,
  ) {
    return _ailiaGetBlobData(
      net,
      dest,
      dest_size,
      blob_idx,
    );
  }

  late final _ailiaGetBlobDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('ailiaGetBlobData');
  late final _ailiaGetBlobData = _ailiaGetBlobDataPtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>, int, int)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)の型を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param type データ型の書き出し先バッファ。値は AILIA_DATATYPE_XXX で定義されています。
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Get the type of Blob.
  /// @param net A network instance pointer
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @param type The type of blob is stored to it. Values are defined as AILIA_DATATYPE_XXX.
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetBlobDataType(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Int> type,
    int blob_idx,
  ) {
    return _ailiaGetBlobDataType(
      net,
      type,
      blob_idx,
    );
  }

  late final _ailiaGetBlobDataTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Int>,
              ffi.UnsignedInt)>>('ailiaGetBlobDataType');
  late final _ailiaGetBlobDataType = _ailiaGetBlobDataTypePtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Int>, int)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)のインデックスを名前で探し取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @param name 検索するBlob名
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  /// なお、ailiaOpenStreamXXX呼び出し時は入出力Blobのみが検索可能です。中間Blobを検索する場合ailiaOpneWeightXXXを呼び出す必要があります。
  ///
  /// \~english
  /// @brief Searches by name for the index of the internal data (blob) during inference and returns it.
  /// @param net A network instance pointer
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @param name The name of the blob to search for
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  /// In addition, when call this API before call ailiaOpenWeightXXX, can only find inputs and outputs blobs.
  /// If you want find intermediate blobs, please call ailiaOpenWeightXXX before.
  int ailiaFindBlobIndexByName(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> blob_idx,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _ailiaFindBlobIndexByName(
      net,
      blob_idx,
      name,
    );
  }

  late final _ailiaFindBlobIndexByNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Char>)>>('ailiaFindBlobIndexByName');
  late final _ailiaFindBlobIndexByName =
      _ailiaFindBlobIndexByNamePtr.asFunction<
          int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Char>)>();

  /// \~japanese
  /// @brief 内部データ(Blob)の名前の出力に必要なバッファのサイズを取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param blob_idx blobのインデックス (0～ ailiaGetBlobCount() -1)
  /// @param buffer_size Blob名の出力に必要なバッファのサイズ(終端null文字分を含む)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  /// なお、ailiaOpenStreamXXX呼び出し時は入出力Blobのみが検索可能です。中間Blobを検索する場合ailiaOpneWeightXXXを呼び出す必要があります。
  ///
  /// \~english
  /// @brief Gets the size of the buffer needed for output of the name of the internal data (blob).
  /// @param net A network instance pointer
  /// @param blob_idx The index of the blob (0 to  ailiaGetBlobCount() -1)
  /// @param buffer_size The size of the buffer needed for output of the blob name (including the null terminator)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  /// In addition, when call this API before call ailiaOpenWeightXXX, can only find inputs and outputs blobs.
  /// If you want find intermediate blobs, please call ailiaOpenWeightXXX before.
  int ailiaGetBlobNameLengthByIndex(
    ffi.Pointer<AILIANetwork> net,
    int blob_idx,
    ffi.Pointer<ffi.UnsignedInt> buffer_size,
  ) {
    return _ailiaGetBlobNameLengthByIndex(
      net,
      blob_idx,
      buffer_size,
    );
  }

  late final _ailiaGetBlobNameLengthByIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.UnsignedInt,
              ffi.Pointer<ffi.UnsignedInt>)>>('ailiaGetBlobNameLengthByIndex');
  late final _ailiaGetBlobNameLengthByIndex =
      _ailiaGetBlobNameLengthByIndexPtr.asFunction<
          int Function(
              ffi.Pointer<AILIANetwork>, int, ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief 推論時の内部データ(Blob)の名前をインデックスで探し取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param buffer Blob名の出力先バッファ
  /// @param buffer_size バッファのサイズ(終端null文字分を含む)
  /// @param blob_idx 検索するblobのインデックス
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  /// なお、ailiaOpenStreamXXX呼び出し時は入出力Blobのみが検索可能です。中間Blobを検索する場合ailiaOpneWeightXXXを呼び出す必要があります。
  ///
  /// \~english
  /// @brief Searches by index for the name of the internal data (blob) during inference and returns it.
  /// @param net A network instance pointer
  /// @param buffer The output destination buffer for the blob name
  /// @param buffer_size The size of the buffer (including the null terminator)
  /// @param blob_idx The index of the blob to search for
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  /// In addition, when call this API before call ailiaOpenWeightXXX, can only find inputs and outputs blobs.
  /// If you want find intermediate blobs, please call ailiaOpenWeightXXX before.
  int ailiaFindBlobNameByIndex(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Char> buffer,
    int buffer_size,
    int blob_idx,
  ) {
    return _ailiaFindBlobNameByIndex(
      net,
      buffer,
      buffer_size,
      blob_idx,
    );
  }

  late final _ailiaFindBlobNameByIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('ailiaFindBlobNameByIndex');
  late final _ailiaFindBlobNameByIndex =
      _ailiaFindBlobNameByIndexPtr.asFunction<
          int Function(
              ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Char>, int, int)>();

  /// \~japanese
  /// @brief ネットワークSummary用に必要なバッファのサイズを取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param buffer_size バッファのサイズの格納先(終端null文字分を含む)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Gets the size of the buffer needed for the network summary.
  /// @param net A network instance pointer
  /// @param buffer_size The storage location of the buffer size (including the null terminator)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaGetSummaryLength(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> buffer_size,
  ) {
    return _ailiaGetSummaryLength(
      net,
      buffer_size,
    );
  }

  late final _ailiaGetSummaryLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ailiaGetSummaryLength');
  late final _ailiaGetSummaryLength = _ailiaGetSummaryLengthPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief 各Blobの名前と形状を表示します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param buffer Summaryの出力先
  /// @param buffer_size 出力バッファのサイズ(終端null文字分を含む)。 ailiaGetSummaryLength()
  /// で取得した値を設定してください。
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Shows the name and shape of each blob.
  /// @param net A network instance pointer
  /// @param buffer The output destination of the summary
  /// @param buffer_size The size of the output buffer (including the null terminator). Set the value obtained by
  /// ailiaGetSummaryLength() .
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaSummary(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Char> buffer,
    int buffer_size,
  ) {
    return _ailiaSummary(
      net,
      buffer,
      buffer_size,
    );
  }

  late final _ailiaSummaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('ailiaSummary');
  late final _ailiaSummary = _ailiaSummaryPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Char>, int)>();

  /// \~japanese
  /// @brief 入力データ(Blob)の数を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param input_blob_count 入力blobの数の格納先
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  /// なお、入力Blobの列挙はailiaOpenStreamXXX呼び出し時に行われますが変更可能な重み(input付きinitialzier)の列挙はailiaOpneWeightXXX呼び出し時に行われます。
  /// そのためailiaOpenStreamXXX呼び出し直後とailiaOpneWeightXXX呼び出し直後で返答する数が変わる場合があります。
  ///
  /// \~english
  /// @brief Get the number of input data blobs.
  /// @param net A network instance pointer
  /// @param input_blob_count Storage location of the number of input blobs
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  /// In addition, this api returuns number of inputs when after call ailiaOpenStreamXXX.
  /// And, when call ailiaOpenWeightXXX, enumerate and optimzie initializer with input blobs.
  /// So, this api may return more count after call ailiaOpenWeightXXX.
  int ailiaGetInputBlobCount(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> input_blob_count,
  ) {
    return _ailiaGetInputBlobCount(
      net,
      input_blob_count,
    );
  }

  late final _ailiaGetInputBlobCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ailiaGetInputBlobCount');
  late final _ailiaGetInputBlobCount = _ailiaGetInputBlobCountPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief 入力データ(Blob)のインデックスを取得します
  /// @param net ネットワークオブジェクトポインタ
  /// @param blob_idx blobのインデックス(0～ ailiaGetBlobCount() -1)
  /// @param input_blob_idx 入力blob内でのインデックス(0～ ailiaGetInputBlobCount() -1)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  /// なお、ailiaOpenStreamXXX呼び出し時に列挙されたinput_blob_idx及びblob_idxは保持されるためailiaOpneWeightXXX呼び出し後も同じ値が返ることが保証されます。
  ///
  /// \~english
  /// @brief Get the blob index of the input data.
  /// @param net A network instance pointer
  /// @param blob_idx index of the blob (between 0 and  ailiaGetBlobCount() -1)
  /// @param input_blob_idx index among the input blobs (between 0 and  ailiaGetInputBlobCount() -1)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  /// In addition, we guarantee that input_blob_idx and blob_idx which enumerate when call ailiaOpenStreamXXX are not changed when call ailiaOpneWeightXXX.
  int ailiaGetBlobIndexByInputIndex(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> blob_idx,
    int input_blob_idx,
  ) {
    return _ailiaGetBlobIndexByInputIndex(
      net,
      blob_idx,
      input_blob_idx,
    );
  }

  late final _ailiaGetBlobIndexByInputIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('ailiaGetBlobIndexByInputIndex');
  late final _ailiaGetBlobIndexByInputIndex =
      _ailiaGetBlobIndexByInputIndexPtr.asFunction<
          int Function(
              ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>, int)>();

  /// \~japanese
  /// @brief 指定したBlobに入力データを与えます。
  /// @param net ネットワークオブジェクトポインタ
  /// @param src 推論データ X,Y,Z,Wの順でnumeric型で格納
  /// @param src_size 推論データのbyte数
  /// @param blob_idx 入力するblobのインデックス
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 複数入力があるネットワークなどで入力を指定する場合に用います。
  /// blob_idxで入力レイヤーのblob以外のものを指定した場合、 \ref AILIA_STATUS_INVALID_ARGUMENT が返ります。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Provides the specified blob with the input data.
  /// @param net A network instance pointer
  /// @param src The inference data is stored as numeric type data in the order of X, Y, Z, and W.
  /// @param src_size The number of bytes of the inference data
  /// @param blob_idx The index of the blob for input
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function is used to specify the input on networks with multiple inputs.
  /// If something other than a blob in the input layer is specified for blob_idx, the function returns  \ref
  /// AILIA_STATUS_INVALID_ARGUMENT .
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaSetInputBlobData(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Void> src,
    int src_size,
    int blob_idx,
  ) {
    return _ailiaSetInputBlobData(
      net,
      src,
      src_size,
      blob_idx,
    );
  }

  late final _ailiaSetInputBlobDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('ailiaSetInputBlobData');
  late final _ailiaSetInputBlobData = _ailiaSetInputBlobDataPtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.Void>, int, int)>();

  /// \~japanese
  /// @brief 指定したBlobの形状を変更します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 入力データの形状情報
  /// @param blob_idx 変更するblobのインデックス
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 複数入力があるネットワークなどで入力形状を変更する場合に用います。
  /// blob_idxは入力レイヤーのblob以外のものを指定した場合 \ref AILIA_STATUS_INVALID_ARGUMENT が返ります。
  /// その他の注意点は ailiaSetInputShape() の解説を参照してください。
  /// 入力形状のランクが5次元以上の場合は ailiaSetInputBlobShapeND() を利用してください。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Change the shape of the blob given by its index
  /// @param net network object pointer
  /// @param shape new shape of the blob
  /// @param blob_idx index referencing the blob to reshape
  /// @param version AILIA_SHAPE_VERSION
  /// @return
  /// In case of success,  \ref AILIA_STATUS_SUCCESS , and otherwise the coresponding error code.
  /// @details
  /// This is useful to change the network input shape in a context where there are several input blobs.
  /// If blob_idx does not correspond to an input layer,  \ref AILIA_STATUS_INVALID_ARGUMENT  is returned.
  /// For other related remarks, see the documentation of  ailiaSetInputShape().
  /// If dimension of shape has 5 or more, please use  ailiaSetInputBlobShapeND().
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaSetInputBlobShape(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<AILIAShape> shape,
    int blob_idx,
    int version,
  ) {
    return _ailiaSetInputBlobShape(
      net,
      shape,
      blob_idx,
      version,
    );
  }

  late final _ailiaSetInputBlobShapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('ailiaSetInputBlobShape');
  late final _ailiaSetInputBlobShape = _ailiaSetInputBlobShapePtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, ffi.Pointer<AILIAShape>, int, int)>();

  /// \~japanese
  /// @brief 指定したBlobの形状を変更します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param shape 入力データの各次元の大きさの配列(dim-1, dim-2, ... ,1, 0)
  /// @param dim shapeの次元
  /// @param blob_idx 変更するblobのインデックス
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 複数入力があるネットワークなどで入力形状を変更する場合に用います。
  /// blob_idxは入力レイヤーのblob以外のものを指定した場合 \ref AILIA_STATUS_INVALID_ARGUMENT が返ります。
  /// その他の注意点は ailiaSetInputShapeND() の解説を参照してください。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Change the shape of the blob given by its index
  /// @param net network object pointer
  /// @param shape An array of shape that contains size of each axis (dim-1, dim-2, ... ,1, 0)
  /// @param dim The size of shape.
  /// @param blob_idx index referencing the blob to reshape
  /// @return
  /// In case of success,  \ref AILIA_STATUS_SUCCESS , and otherwise the coresponding error code.
  /// @details
  /// This is useful to change the network input shape in a context where there are several input blobs.
  /// If blob_idx does not correspond to an input layer,  \ref AILIA_STATUS_INVALID_ARGUMENT  is returned.
  /// For other related remarks, see the documentation of  ailiaSetInputShapeND().
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaSetInputBlobShapeND(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> shape,
    int dim,
    int blob_idx,
  ) {
    return _ailiaSetInputBlobShapeND(
      net,
      shape,
      dim,
      blob_idx,
    );
  }

  late final _ailiaSetInputBlobShapeNDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              ffi.UnsignedInt)>>('ailiaSetInputBlobShapeND');
  late final _ailiaSetInputBlobShapeND =
      _ailiaSetInputBlobShapeNDPtr.asFunction<
          int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>,
              int, int)>();

  /// \~japanese
  /// @brief 指定したBlob間でデータをコピーします
  ///
  /// @param dst_net コピー先のblobが含まれるネットワークオブジェクトポインター
  /// @param dst_blob_idx コピー先のblobのインデックス
  /// @param src_net コピー元のblobが含まれるネットワークオブジェクトポインター
  /// @param src_blob_idx コピー元のblobのインデックス
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 指定したネットワークのBlobをコピーします。コピー元とコピー先のネットワークは別のものを指定することができます。
  /// コピー先のBlobは入力Blobのインデックスを、コピー元のBlobは任意のBlobのインデックスを指定してください。
  /// コピー先にその他のBlobを指定した場合 \ref AILIA_STATUS_INVALID_ARGUMENT が返ります。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Perform copies  between blobs that specified.
  ///
  /// @param dst_net The network object pointer that contains destination blob
  /// @param dst_blob_idx The index of destination blob
  /// @param src_net The network object pointer that contains source blob
  /// @param src_blob_idx The index of source blob
  /// @return
  /// In case of success,  \ref AILIA_STATUS_SUCCESS , and otherwise the coresponding error code.
  /// @details
  /// Perform copy blobs between specified network. It accepts copy over different network.
  /// The src_blob_index must be specify blob index that inputs of src_net, and the dst_blob_index mut be specify blob index that outputs of dst_net.
  /// If specify index of other blob for dst_blob_idx , this function returns \ref AILIA_STATUS_INVALID_ARGUMENT .
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaCopyBlobData(
    ffi.Pointer<AILIANetwork> dst_net,
    int dst_blob_idx,
    ffi.Pointer<AILIANetwork> src_net,
    int src_blob_idx,
  ) {
    return _ailiaCopyBlobData(
      dst_net,
      dst_blob_idx,
      src_net,
      src_blob_idx,
    );
  }

  late final _ailiaCopyBlobDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<AILIANetwork>,
              ffi.UnsignedInt,
              ffi.Pointer<AILIANetwork>,
              ffi.UnsignedInt)>>('ailiaCopyBlobData');
  late final _ailiaCopyBlobData = _ailiaCopyBlobDataPtr.asFunction<
      int Function(
          ffi.Pointer<AILIANetwork>, int, ffi.Pointer<AILIANetwork>, int)>();

  /// \~japanese
  /// @brief 事前に指定した入力データで推論を行います。
  /// @param net ネットワークオブジェクトポインタ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ailiaSetInputBlobData() を用いて入力を与えた場合などに用います。
  /// 推論結果は ailiaGetBlobData() で取得してください。
  /// このAPIはailiaOpenWeighXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Makes inferences with the input data specified in advance.
  /// @param net A network instance pointer
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This function is used when, for example, the input is provided with  ailiaSetInputBlobData() .
  /// Get the inference result with  ailiaGetBlobData() .
  /// This API can be call after call ailiaOpenWeighXXX().
  int ailiaUpdate(
    ffi.Pointer<AILIANetwork> net,
  ) {
    return _ailiaUpdate(
      net,
    );
  }

  late final _ailiaUpdatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<AILIANetwork>)>>(
          'ailiaUpdate');
  late final _ailiaUpdate =
      _ailiaUpdatePtr.asFunction<int Function(ffi.Pointer<AILIANetwork>)>();

  /// \~japanese
  /// @brief 出力データ(Blob)の数を取得します。
  /// @param net ネットワークオブジェクトポインタ
  /// @param output_blob_count 出力blobの数の格納先
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Get the number of output data blobs.
  /// @param net A network instance pointer
  /// @param output_blob_count Storage location for the number of output blobs.
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  int ailiaGetOutputBlobCount(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> output_blob_count,
  ) {
    return _ailiaGetOutputBlobCount(
      net,
      output_blob_count,
    );
  }

  late final _ailiaGetOutputBlobCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ailiaGetOutputBlobCount');
  late final _ailiaGetOutputBlobCount = _ailiaGetOutputBlobCountPtr.asFunction<
      int Function(ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief 出力データ(Blob)のインデックスを取得します
  /// @param net ネットワークオブジェクトポインタ
  /// @param blob_idx blobのインデックス(0～ ailiaGetBlobCount() -1)
  /// @param output_blob_idx 出力blob内でのインデックス(0～ ailiaGetOutputBlobCount() -1)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// このAPIはailiaOpenStreamXXX呼び出し後より利用可能です。
  ///
  /// \~english
  /// @brief Get the blob index of the input data blob.
  /// @param net A network instance pointer
  /// @param blob_idx blob index (between 0 and  ailiaGetBlobCount() -1)
  /// @param output_blob_idx index among output blobs (between 0 and  ailiaGetOutputBlobCount() -1)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This API can be call after call ailiaOpenStreamXXX().
  int ailiaGetBlobIndexByOutputIndex(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.UnsignedInt> blob_idx,
    int output_blob_idx,
  ) {
    return _ailiaGetBlobIndexByOutputIndex(
      net,
      blob_idx,
      output_blob_idx,
    );
  }

  late final _ailiaGetBlobIndexByOutputIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('ailiaGetBlobIndexByOutputIndex');
  late final _ailiaGetBlobIndexByOutputIndex =
      _ailiaGetBlobIndexByOutputIndexPtr.asFunction<
          int Function(
              ffi.Pointer<AILIANetwork>, ffi.Pointer<ffi.UnsignedInt>, int)>();

  /// \~japanese
  /// @brief ailiaがグローバルに確保したGPUリソース等を解放します
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返します。
  /// @details
  /// ailiaCreate() で作成したインスタンス全てを ailiaDestroy() で解放した状態で呼び出す必要があります。
  /// それ以外の状態で呼び出された場合 #ref AILIA_STATUS_INVALID_STATE を返します。
  /// Windows 環境の場合、DllMain 等からこの API を呼び出すとデッドロックする可能性があります。
  ///
  /// \~english
  /// @brief Release GPU and other resources that have been globally allocated with ailia.
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// It must be called with all ailia instances created by ailiaCreate() released by ailiaDestroy().
  /// Otherwise, #ref AILIA_STATUS_INVALID_STATE will be returned.
  /// Call this API from DllMain() on Windows OS, there is possibility of a deadlock.
  int ailiaFinalize() {
    return _ailiaFinalize();
  }

  late final _ailiaFinalizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ailiaFinalize');
  late final _ailiaFinalize = _ailiaFinalizePtr.asFunction<int Function()>();

  /// \~japanese
  /// @brief 一時キャッシュディレクトリを指定します
  /// @param cache_dir 一時キャッシュディレクトリ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 指定したキャッシュディレクトリは推論実行環境毎に最適化したマシンコードを生成して保存するためにシステムが利用します。
  /// ailia の実行開始時に一度だけ呼び出してください。二回目以降の呼び出しに対しては無視して成功を返します。
  /// 複数スレッドから呼び出された場合も内部で排他制御しているので特に問題は発生しません。
  /// Vulkan のシェーダーキャッシュ機能など、この API を呼ぶまで利用できないものがあります。
  /// cache_dirにはContext.getCacheDir()で取得したファイルパスを指定してください。
  ///
  /// \~english
  /// @brief Specifies a temporary cache directory.
  /// @param cache_dir Temporary cache directory
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This system uses the specified cache directory to generate and store machine code optimized for each inference
  /// backend. Call only once at the start of execution of ailia. It ignores any second and subsequent calls, and
  /// automatically returns success. There is no particular problem if it is called from multiple threads, as it provides
  /// exclusive control internally. Some functions, such as Vulkan shader cache, cannot be used until this API function is
  /// called. Specify the file path obtained by Context.getCacheDir() for cache_dir.
  int ailiaSetTemporaryCachePathA(
    ffi.Pointer<ffi.Char> cache_dir,
  ) {
    return _ailiaSetTemporaryCachePathA(
      cache_dir,
    );
  }

  late final _ailiaSetTemporaryCachePathAPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'ailiaSetTemporaryCachePathA');
  late final _ailiaSetTemporaryCachePathA = _ailiaSetTemporaryCachePathAPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ailiaSetTemporaryCachePathW(
    ffi.Pointer<ffi.Int> cache_dir,
  ) {
    return _ailiaSetTemporaryCachePathW(
      cache_dir,
    );
  }

  late final _ailiaSetTemporaryCachePathWPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Int>)>>(
          'ailiaSetTemporaryCachePathW');
  late final _ailiaSetTemporaryCachePathW = _ailiaSetTemporaryCachePathWPtr
      .asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  /// \~japanese
  /// @brief 利用可能な計算環境(CPU, GPU)の数を取得します
  /// @param env_count 計算環境情報の数の格納先
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the number of available computational environments (CPU, GPU).
  /// @param env_count The storage location of the number of computational environment information
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaGetEnvironmentCount(
    ffi.Pointer<ffi.UnsignedInt> env_count,
  ) {
    return _ailiaGetEnvironmentCount(
      env_count,
    );
  }

  late final _ailiaGetEnvironmentCountPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.UnsignedInt>)>>(
      'ailiaGetEnvironmentCount');
  late final _ailiaGetEnvironmentCount = _ailiaGetEnvironmentCountPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief 計算環境の一覧を取得します
  /// @param env 計算環境情報の格納先(AILIANetworkインスタンスを破棄するまで有効)
  /// @param env_idx 計算環境情報のインデックス(0～ ailiaGetEnvironmentCount() -1)
  /// @param version AILIA_ENVIRONMENT_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the list of computational environments.
  /// @param env The storage location of the computational environment information (valid until the AILIANetwork instance
  /// is destroyed)
  /// @param env_idx The index of the computational environment information (0 to  ailiaGetEnvironmentCount() -1)
  /// @param version AILIA_ENVIRONMENT_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaGetEnvironment(
    ffi.Pointer<ffi.Pointer<AILIAEnvironment>> env,
    int env_idx,
    int version,
  ) {
    return _ailiaGetEnvironment(
      env,
      env_idx,
      version,
    );
  }

  late final _ailiaGetEnvironmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<AILIAEnvironment>>,
              ffi.UnsignedInt, ffi.UnsignedInt)>>('ailiaGetEnvironment');
  late final _ailiaGetEnvironment = _ailiaGetEnvironmentPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<AILIAEnvironment>>, int, int)>();

  /// \~japanese
  /// @brief 選択された計算環境を取得します
  /// @param net ネットワークオブジェクトポインタ
  /// @param env 計算環境情報の格納先(AILIANetworkインスタンスを破棄するまで有効)
  /// @param version AILIA_ENVIRONMENT_VERSION
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the selected computational environment.
  /// @param net A network instance pointer
  /// @param env The storage location of the computational environment information (valid until the AILIANetwork instance
  /// is destroyed)
  /// @param version AILIA_ENVIRONMENT_VERSION
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaGetSelectedEnvironment(
    ffi.Pointer<AILIANetwork> net,
    ffi.Pointer<ffi.Pointer<AILIAEnvironment>> env,
    int version,
  ) {
    return _ailiaGetSelectedEnvironment(
      net,
      env,
      version,
    );
  }

  late final _ailiaGetSelectedEnvironmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Pointer<AILIAEnvironment>>,
              ffi.UnsignedInt)>>('ailiaGetSelectedEnvironment');
  late final _ailiaGetSelectedEnvironment =
      _ailiaGetSelectedEnvironmentPtr.asFunction<
          int Function(ffi.Pointer<AILIANetwork>,
              ffi.Pointer<ffi.Pointer<AILIAEnvironment>>, int)>();

  /// \~japanese
  /// @brief 推論時のメモリの使用方針を設定します
  /// @param net ネットワークオブジェクトポインタ
  /// @param mode メモリモード(論理和で複数指定可) AILIA_MEMORY_XXX (デフォルト: \ref AILIA_MEMORY_REDUCE_CONSTANT )
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// メモリの使用方針を変更します。 \ref AILIA_MEMORY_NO_OPTIMIZATION 以外を指定した場合は、
  /// 推論時に確保する中間バッファーを開放するため、推論時のメモリ使用量を削減することができます。
  /// ailiaCreate() の直後に指定する必要があります。ailiaOpenを呼び出した後は変更することができません。
  /// なお、中間バッファーを開放するように指定した場合、該当するBlobに対し、 ailiaGetBlobData() を呼び出すと
  /// \ref AILIA_STATUS_DATA_HIDDEN エラーが返ります。
  ///
  /// \~english
  /// @brief Set the memory usage policy for inference
  /// @param net A network instance pointer
  /// @param mode Memory mode (Multiple specifications possible with logical sum) AILIA_MEMORY_XXX (Default : \ref
  /// AILIA_MEMORY_REDUCE_CONSTANT )
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Change the memory usage policy.
  /// If a value other than  \ref AILIA_MEMORY_NO_OPTIMIZATION  is specified,
  /// the intermediate buffer secured during inference will be released, so the memory usage during inference can be
  /// reduced. Must be specified immediately after  ailiaCreate() . It cannot be changed after calling ailiaOpen. If you
  /// specify to release the intermediate buffer, calling  ailiaGetBlobData()  for the corresponding blob will return an
  /// \ref AILIA_STATUS_DATA_HIDDEN  error.
  int ailiaSetMemoryMode(
    ffi.Pointer<AILIANetwork> net,
    int mode,
  ) {
    return _ailiaSetMemoryMode(
      net,
      mode,
    );
  }

  late final _ailiaSetMemoryModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>,
              ffi.UnsignedInt)>>('ailiaSetMemoryMode');
  late final _ailiaSetMemoryMode = _ailiaSetMemoryModePtr
      .asFunction<int Function(ffi.Pointer<AILIANetwork>, int)>();

  /// \~japanese
  /// @brief 推論時のレイヤー統合を無効化します
  /// @param net ネットワークオブジェクトポインタ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// レイヤー統合により取得できなくなるBlobを取得する必要がある場合などに用います。
  /// ailiaCreate() の直後に指定する必要があります。ailiaOpenを呼び出した後は変更することができません。
  /// なお、レイヤー統合を無効化すると推論速度が低下する場合があります。
  ///
  /// \~english
  /// @brief Disalbe layer fusion optimaization for inference
  /// @param net A network instance pointer
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// This api use to get blob that remove by layer fusion optimization.
  /// Must be specified immediately after  ailiaCreate() . It cannot be changed after calling ailiaOpen.
  /// Note: When disable layer fusion optimization, inference speed may be down.
  int ailiaDisableLayerFusion(
    ffi.Pointer<AILIANetwork> net,
  ) {
    return _ailiaDisableLayerFusion(
      net,
    );
  }

  late final _ailiaDisableLayerFusionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<AILIANetwork>)>>(
          'ailiaDisableLayerFusion');
  late final _ailiaDisableLayerFusion = _ailiaDisableLayerFusionPtr
      .asFunction<int Function(ffi.Pointer<AILIANetwork>)>();

  /// \~japanese
  /// @brief プロファイルモードをセットします
  /// @param net          ネットワークオブジェクトポインタ
  /// @param mode         プロファイルモード
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// プロファイルモードを指定します。デフォルトは無効です。
  /// ailiaOpenStreamXXXを呼び出したあとに呼び出してください。
  /// プロファイルモードを有効にした場合、 ailiaSummary() の出力にプロファイル結果が追加されます。
  ///
  /// \~english
  /// @brief Set the profile mode.
  /// @param net          The network instance pointer
  /// @param mode         Profile mode AILIA_PROFILE_XXX (Default : \ref AILIA_PROFILE_DISABLE )
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Set the profile mode. The default is profile disabled.
  /// Call it after calling ailiaOpenStreamXXX.
  /// When profile mode is enabled, you can get profile result via  ailiaSummary() .
  int ailiaSetProfileMode(
    ffi.Pointer<AILIANetwork> net,
    int mode,
  ) {
    return _ailiaSetProfileMode(
      net,
      mode,
    );
  }

  late final _ailiaSetProfileModePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIANetwork>,
              ffi.UnsignedInt)>>('ailiaSetProfileMode');
  late final _ailiaSetProfileMode = _ailiaSetProfileModePtr
      .asFunction<int Function(ffi.Pointer<AILIANetwork>, int)>();

  /// \~japanese
  /// @brief ステータスコードに対応する文字列を返します。
  /// @param status_code   ステータスコード
  /// @return
  /// ステータスコードに対応する文字列。
  /// @details
  /// 返値は解放する必要はありません。
  /// 返された文字列は ailia のライブラリ(ailia.dll, libailia.so 等)をアンロードするまで有効です。
  /// AILIANetwork のインスタンスがある場合は ailiaGetErrorDetail() でエラーの詳細を取得できます。
  ///
  /// \~english
  /// @brief Returns the string describing given status code.
  /// @param status_code    Status code
  /// @return
  /// String describing given status code.
  /// Retuned string is valid until the library of ailia (ailia.dll, libailia.so, etc) is unloaded.
  /// @details
  /// The return value does not have to be released.
  /// If an instance of AILIANetwork is exist, ailiaGetErrorDetail() can be used to get the detail of the error.
  ffi.Pointer<ffi.Char> ailiaGetStatusString(
    int status_code,
  ) {
    return _ailiaGetStatusString(
      status_code,
    );
  }

  late final _ailiaGetStatusStringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'ailiaGetStatusString');
  late final _ailiaGetStatusString = _ailiaGetStatusStringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// \~japanese
  /// @brief エラーの詳細を返します
  /// @param net   ネットワークオブジェクトポインタ
  /// @return
  /// エラー詳細
  /// @details
  /// 返値は解放する必要はありません。
  /// 文字列の有効期間は次にailiaのAPIを呼ぶまでです。
  /// モデルが暗号化されている場合は空文字を返します。
  ///
  /// \~english
  /// @brief Returns the details of errors.
  /// @param net   The network instance pointer
  /// @return
  /// Error details
  /// @details
  /// The return value does not have to be released.
  /// The string is valid until the next ailia API function is called.
  /// If model is encrypted, this function returns empty string.
  ffi.Pointer<ffi.Char> ailiaGetErrorDetail(
    ffi.Pointer<AILIANetwork> net,
  ) {
    return _ailiaGetErrorDetail(
      net,
    );
  }

  late final _ailiaGetErrorDetailPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<AILIANetwork>)>>('ailiaGetErrorDetail');
  late final _ailiaGetErrorDetail = _ailiaGetErrorDetailPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<AILIANetwork>)>();

  /// \~japanese
  /// @brief ライブラリバージョンを取得します
  /// @return
  /// バージョン番号
  /// @details
  /// 返値は解放する必要はありません。
  ///
  /// \~english
  /// @brief Get the version of the library.
  /// @return
  /// Version number
  /// @details
  /// The return value does not have to be released.
  ffi.Pointer<ffi.Char> ailiaGetVersion() {
    return _ailiaGetVersion();
  }

  late final _ailiaGetVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'ailiaGetVersion');
  late final _ailiaGetVersion =
      _ailiaGetVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// \~japanese
  /// @brief トークナイズオブジェクトを作成します。
  /// @param net トークナイザオブジェクトポインタへのポインタ
  /// @param type AILIA_TOKENIZER_TYPE_*
  /// @param flag AILIA_TOKENIZER_FLAG_*の論理和
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// トークナイズオブジェクトを作成します。
  ///
  /// \~english
  /// @brief Creates a tokenizer instance.
  /// @param net A pointer to the tokenizer instance pointer
  /// @param type AILIA_TOKENIZER_TYPE_*
  /// @param flag OR of AILIA_TOKENIZER_FLAG_*
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Creates a tokenizer instance.
  int ailiaTokenizerCreate(
    ffi.Pointer<ffi.Pointer<AILIATokenizer>> net,
    int type,
    int flags,
  ) {
    return _ailiaTokenizerCreate(
      net,
      type,
      flags,
    );
  }

  late final _ailiaTokenizerCreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<AILIATokenizer>>, ffi.Int,
              ffi.Int)>>('ailiaTokenizerCreate');
  late final _ailiaTokenizerCreate = _ailiaTokenizerCreatePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<AILIATokenizer>>, int, int)>();

  /// \~japanese
  /// @brief モデルファイルを読み込みます。
  /// @param net トークナイザオブジェクトポインタへのポインタ
  /// @param path SentencePieceのモデルファイルのパス
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// SentencePieceのモデルファイルを読み込みます。AILIA_TOKENIZER_TYPE_XLM_ROBERTAもしくはAILIA_TOKENIZER_TYPE_MARIANの場合のみ必要です。
  ///
  /// \~english
  /// @brief Open model file.
  /// @param net A pointer to the tokenizer instance pointer
  /// @param path Path for SentencePiece
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Open a model file for SentencePiece. This API only requires for AILIA_TOKENIZER_TYPE_XLM_ROBERTA or AILIA_TOKENIZER_TYPE_MARIAN.
  int ailiaTokenizerOpenModelFileA(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ailiaTokenizerOpenModelFileA(
      net,
      path,
    );
  }

  late final _ailiaTokenizerOpenModelFileAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>,
              ffi.Pointer<ffi.Char>)>>('ailiaTokenizerOpenModelFileA');
  late final _ailiaTokenizerOpenModelFileA =
      _ailiaTokenizerOpenModelFileAPtr.asFunction<
          int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Char>)>();

  int ailiaTokenizerOpenModelFileW(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.Int> path,
  ) {
    return _ailiaTokenizerOpenModelFileW(
      net,
      path,
    );
  }

  late final _ailiaTokenizerOpenModelFileWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>,
              ffi.Pointer<ffi.Int>)>>('ailiaTokenizerOpenModelFileW');
  late final _ailiaTokenizerOpenModelFileW =
      _ailiaTokenizerOpenModelFileWPtr.asFunction<
          int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Int>)>();

  /// \~japanese
  /// @brief 辞書ファイルを読み込みます。
  /// @param net トークナイザオブジェクトポインタへのポインタ
  /// @param path Mecabの辞書ファイルのパス
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// Mecabの辞書ファイルを読み込みます。AILIA_TOKENIZER_TYPE_BERT_JAPANESE_XXXの場合のみ必要です。
  ///
  /// \~english
  /// @brief Open dictionary file.
  /// @param net A pointer to the tokenizer instance pointer
  /// @param path Path for dictionary of Mecab
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Open a model file for Mecab. This API only requires for AILIA_TOKENIZER_TYPE_BERT_JAPANESE_XXX.
  int ailiaTokenizerOpenDictionaryFileA(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ailiaTokenizerOpenDictionaryFileA(
      net,
      path,
    );
  }

  late final _ailiaTokenizerOpenDictionaryFileAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>,
              ffi.Pointer<ffi.Char>)>>('ailiaTokenizerOpenDictionaryFileA');
  late final _ailiaTokenizerOpenDictionaryFileA =
      _ailiaTokenizerOpenDictionaryFileAPtr.asFunction<
          int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Char>)>();

  int ailiaTokenizerOpenDictionaryFileW(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.Int> path,
  ) {
    return _ailiaTokenizerOpenDictionaryFileW(
      net,
      path,
    );
  }

  late final _ailiaTokenizerOpenDictionaryFileWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>,
              ffi.Pointer<ffi.Int>)>>('ailiaTokenizerOpenDictionaryFileW');
  late final _ailiaTokenizerOpenDictionaryFileW =
      _ailiaTokenizerOpenDictionaryFileWPtr.asFunction<
          int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Int>)>();

  /// \~japanese
  /// @brief 単語ファイルを読み込みます。
  /// @param net トークナイザオブジェクトポインタへのポインタ
  /// @param path 単語ファイルのパス
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 単語ファイルを読み込みます。AILIA_TOKENIZER_TYPE_BERT_JAPANESE_XXXの場合のみ必要です。
  ///
  /// \~english
  /// @brief Open vocab file.
  /// @param net A pointer to the tokenizer instance pointer
  /// @param path Path for Vocab file
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Open a vocab file. This API only requires for AILIA_TOKENIZER_TYPE_BERT_JAPANESE_XXX.
  int ailiaTokenizerOpenVocabFileA(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ailiaTokenizerOpenVocabFileA(
      net,
      path,
    );
  }

  late final _ailiaTokenizerOpenVocabFileAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>,
              ffi.Pointer<ffi.Char>)>>('ailiaTokenizerOpenVocabFileA');
  late final _ailiaTokenizerOpenVocabFileA =
      _ailiaTokenizerOpenVocabFileAPtr.asFunction<
          int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Char>)>();

  int ailiaTokenizerOpenVocabFileW(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.Int> path,
  ) {
    return _ailiaTokenizerOpenVocabFileW(
      net,
      path,
    );
  }

  late final _ailiaTokenizerOpenVocabFileWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>,
              ffi.Pointer<ffi.Int>)>>('ailiaTokenizerOpenVocabFileW');
  late final _ailiaTokenizerOpenVocabFileW =
      _ailiaTokenizerOpenVocabFileWPtr.asFunction<
          int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Int>)>();

  /// \~japanese
  /// @brief マージファイルを読み込みます。
  /// @param net トークナイザオブジェクトポインタへのポインタ
  /// @param path マージファイルのパス
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// マージファイルを読み込みます。AILIA_TOKENIZER_TYPE_ROBERTAの場合のみ必要です。
  ///
  /// \~english
  /// @brief Open merges file.
  /// @param net A pointer to the tokenizer instance pointer
  /// @param path Path for merges file
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Open a vocab file. This API only requires for AILIA_TOKENIZER_TYPE_ROBERTA.
  int ailiaTokenizerOpenMergeFileA(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ailiaTokenizerOpenMergeFileA(
      net,
      path,
    );
  }

  late final _ailiaTokenizerOpenMergeFileAPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>,
              ffi.Pointer<ffi.Char>)>>('ailiaTokenizerOpenMergeFileA');
  late final _ailiaTokenizerOpenMergeFileA =
      _ailiaTokenizerOpenMergeFileAPtr.asFunction<
          int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Char>)>();

  int ailiaTokenizerOpenMergeFileW(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.Int> path,
  ) {
    return _ailiaTokenizerOpenMergeFileW(
      net,
      path,
    );
  }

  late final _ailiaTokenizerOpenMergeFileWPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>,
              ffi.Pointer<ffi.Int>)>>('ailiaTokenizerOpenMergeFileW');
  late final _ailiaTokenizerOpenMergeFileW =
      _ailiaTokenizerOpenMergeFileWPtr.asFunction<
          int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Int>)>();

  /// \~japanese
  /// @brief エンコードを行います。
  /// @param net トークナイザオブジェクトポインタ
  /// @param text エンコードするテキスト(UTF8)
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 認識した結果はailiaTokenizerGetTokens APIで取得します。
  ///
  /// \~english
  /// @brief Perform encode
  /// @param net A tokenizer instance pointer
  /// @param text Text for encode (UTF8)
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Get the encoded result with ailiaTokenizerGetTokens API.
  int ailiaTokenizerEncode(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.Char> utf8,
  ) {
    return _ailiaTokenizerEncode(
      net,
      utf8,
    );
  }

  late final _ailiaTokenizerEncodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>,
              ffi.Pointer<ffi.Char>)>>('ailiaTokenizerEncode');
  late final _ailiaTokenizerEncode = _ailiaTokenizerEncodePtr.asFunction<
      int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Char>)>();

  /// \~japanese
  /// @brief トークンの数を取得します。
  /// @param net   トークナイザオブジェクトポインタ
  /// @param count  オブジェクト数
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the number of tokens.
  /// @param net   A tokenizer instance pointer
  /// @param count  The number of objects
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaTokenizerGetTokenCount(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.UnsignedInt> count,
  ) {
    return _ailiaTokenizerGetTokenCount(
      net,
      count,
    );
  }

  late final _ailiaTokenizerGetTokenCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ailiaTokenizerGetTokenCount');
  late final _ailiaTokenizerGetTokenCount =
      _ailiaTokenizerGetTokenCountPtr.asFunction<
          int Function(
              ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief トークンを取得します。
  /// @param net   トークナイザオブジェクトポインタ
  /// @param tokens トークン
  /// @param count  格納先トークン数
  /// @param
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ailiaTokenizerEncode() を一度も実行していない場合は \ref AILIA_STATUS_INVALID_STATE が返ります。
  ///
  /// \~english
  /// @brief Gets the detection results.
  /// @param net   A tokenizer instance pointer
  /// @param tokens Token
  /// @param count  Token count
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// If  ailiaTokenizerEncode()  is not run at all, the function returns  \ref AILIA_STATUS_INVALID_STATE .
  int ailiaTokenizerGetTokens(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.Int> tokens,
    int count,
  ) {
    return _ailiaTokenizerGetTokens(
      net,
      tokens,
      count,
    );
  }

  late final _ailiaTokenizerGetTokensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Int>,
              ffi.UnsignedInt)>>('ailiaTokenizerGetTokens');
  late final _ailiaTokenizerGetTokens = _ailiaTokenizerGetTokensPtr.asFunction<
      int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Int>, int)>();

  /// \~japanese
  /// @brief デコードを行います。
  /// @param net トークナイザオブジェクトポインタ
  /// @param tokens デコードするトークン
  /// @param token_count トークンの数
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// 認識した結果はailiaTokenizerGetText APIで取得します。
  ///
  /// \~english
  /// @brief Perform encode
  /// @param net A tokenizer instance pointer
  /// @param tokens Tokens for decode
  /// @param token_count The number of tokens
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// Get the decoded result with ailiaTokenizerGetText API.
  int ailiaTokenizerDecode(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.Int> tokens,
    int token_count,
  ) {
    return _ailiaTokenizerDecode(
      net,
      tokens,
      token_count,
    );
  }

  late final _ailiaTokenizerDecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Int>,
              ffi.UnsignedInt)>>('ailiaTokenizerDecode');
  late final _ailiaTokenizerDecode = _ailiaTokenizerDecodePtr.asFunction<
      int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Int>, int)>();

  /// \~japanese
  /// @brief テキストの長さを取得します。(NULL文字含む)
  /// @param net   トークナイザオブジェクトポインタ
  /// @param len  テキストの長さ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Gets the size of text. (Include null)
  /// @param net   A tokenizer instance pointer
  /// @param len  The length of text
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaTokenizerGetTextLength(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.UnsignedInt> len,
  ) {
    return _ailiaTokenizerGetTextLength(
      net,
      len,
    );
  }

  late final _ailiaTokenizerGetTextLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>,
              ffi.Pointer<ffi.UnsignedInt>)>>('ailiaTokenizerGetTextLength');
  late final _ailiaTokenizerGetTextLength =
      _ailiaTokenizerGetTextLengthPtr.asFunction<
          int Function(
              ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.UnsignedInt>)>();

  /// \~japanese
  /// @brief テキストを取得します。
  /// @param net   トークナイザオブジェクトポインタ
  /// @param text  テキスト(UTF8)
  /// @param len バッファサイズ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  /// @details
  /// ailiaTokenizerDecode() を一度も実行していない場合は \ref AILIA_STATUS_INVALID_STATE が返ります。
  ///
  /// \~english
  /// @brief Gets the decoded text.
  /// @param net   A tokenizer instance pointer
  /// @param text  Text(UTF8)
  /// @param len  Buffer size
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  /// @details
  /// If  ailiaTokenizerDecode()  is not run at all, the function returns  \ref AILIA_STATUS_INVALID_STATE .
  int ailiaTokenizerGetText(
    ffi.Pointer<AILIATokenizer> net,
    ffi.Pointer<ffi.Char> text,
    int len,
  ) {
    return _ailiaTokenizerGetText(
      net,
      text,
      len,
    );
  }

  late final _ailiaTokenizerGetTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('ailiaTokenizerGetText');
  late final _ailiaTokenizerGetText = _ailiaTokenizerGetTextPtr.asFunction<
      int Function(ffi.Pointer<AILIATokenizer>, ffi.Pointer<ffi.Char>, int)>();

  /// \~japanese
  /// @brief トークナイズオブジェクトを破棄します。
  /// @param net トークナイザオブジェクトポインタ
  ///
  /// \~english
  /// @brief It destroys the tokenizer instance.
  /// @param net A tokenizer instance pointer
  void ailiaTokenizerDestroy(
    ffi.Pointer<AILIATokenizer> net,
  ) {
    return _ailiaTokenizerDestroy(
      net,
    );
  }

  late final _ailiaTokenizerDestroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<AILIATokenizer>)>>(
      'ailiaTokenizerDestroy');
  late final _ailiaTokenizerDestroy = _ailiaTokenizerDestroyPtr
      .asFunction<void Function(ffi.Pointer<AILIATokenizer>)>();

  /// \~japanese
  /// @brief UTF8の文字をUTF32の文字に変換します。
  /// @param utf32   UTF32の文字
  /// @param processed_byte 消費したバイト数(UTF8)
  /// @param utf8  UTF8の文字
  /// @param utf8_len   バッファサイズ
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Convert UTF8 character to UTF32 character.
  /// @param utf32   UTF32の文字
  /// @param processed_byte Processed bytes on UTF8
  /// @param utf8  UTF8の文字
  /// @param utf8_len   Buffer Size
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaTokenizerUtf8ToUtf32(
    ffi.Pointer<ffi.UnsignedInt> utf32,
    ffi.Pointer<ffi.UnsignedInt> processed_byte,
    ffi.Pointer<ffi.Char> utf8,
    int utf8_len,
  ) {
    return _ailiaTokenizerUtf8ToUtf32(
      utf32,
      processed_byte,
      utf8,
      utf8_len,
    );
  }

  late final _ailiaTokenizerUtf8ToUtf32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('ailiaTokenizerUtf8ToUtf32');
  late final _ailiaTokenizerUtf8ToUtf32 =
      _ailiaTokenizerUtf8ToUtf32Ptr.asFunction<
          int Function(ffi.Pointer<ffi.UnsignedInt>,
              ffi.Pointer<ffi.UnsignedInt>, ffi.Pointer<ffi.Char>, int)>();

  /// \~japanese
  /// @brief UTF32の文字をUTF8の文字に変換します。
  /// @param utf8   UTF8の文字(4byte以上必要)
  /// @param processed_byte 書き込んだ文字数(UTF8)
  /// @param utf32  UTF32の文字
  /// @return
  /// 成功した場合は \ref AILIA_STATUS_SUCCESS 、そうでなければエラーコードを返す。
  ///
  /// \~english
  /// @brief Convert UTF32 character to UTF8 character.
  /// @param utf8   UTF8 character(Require greater than 4byte)
  /// @param processed_byte Processed bytes on UTF8
  /// @param utf32  UTF32 character
  /// @return
  /// If this function is successful, it returns  \ref AILIA_STATUS_SUCCESS , or an error code otherwise.
  int ailiaTokenizerUtf32ToUtf8(
    ffi.Pointer<ffi.Char> utf8,
    ffi.Pointer<ffi.UnsignedInt> processed_byte,
    int utf32,
  ) {
    return _ailiaTokenizerUtf32ToUtf8(
      utf8,
      processed_byte,
      utf32,
    );
  }

  late final _ailiaTokenizerUtf32ToUtf8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt)>>('ailiaTokenizerUtf32ToUtf8');
  late final _ailiaTokenizerUtf32ToUtf8 =
      _ailiaTokenizerUtf32ToUtf8Ptr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.UnsignedInt>, int)>();
}

final class _ailiaFileCallback extends ffi.Struct {
  external AILIA_USER_API_FOPEN fopen;

  external AILIA_USER_API_FSEEK fseek;

  external AILIA_USER_API_FTELL ftell;

  external AILIA_USER_API_FREAD fread;

  external AILIA_USER_API_FSIZE fsize;

  external AILIA_USER_API_FCLOSE fclose;
}

/// \~japanese
/// @brief ファイルを開きます
/// @param const void *   ailiaOpenStreamEx() もしくは ailiaOpenWeightEx() に与えたfopen_args
/// @return
/// 成功した場合、ユーザ定義ファイルポインタを返す。
/// 失敗した場合、NULLを返す。
///
/// \~english
/// @brief Opens a file.
/// @param const void *  fopen_args given to  ailiaOpenStreamEx()  or ailiaOpenWeightEx
/// @return
/// This function returns a user-defined file pointer if successful.
/// It returns NULL if it fails.
typedef AILIA_USER_API_FOPEN = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>;

/// \~japanese
/// @brief ファイルをシークします
/// @param void *                     ユーザ定義ファイルポインタ
/// @param  \ref AILIA_FSIZE_RETURN_TYPE     ファイル先頭からのオフセットバイト
/// @return
/// 成功した場合、 \ref AILIA_USER_API_SUCCESS を返す。
/// 失敗した場合、 \ref AILIA_USER_API_FAILED を返す。
///
/// \~english
/// @brief It seeks the file specified.
/// @param void *                     A user-defined file pointer
/// @param  \ref AILIA_FSIZE_RETURN_TYPE     Offset in bytes from the beginning of the file
/// @return
/// This function returns  \ref AILIA_USER_API_SUCCESS  if successful.
/// It returns  \ref AILIA_USER_API_FAILED  if it fails.
typedef AILIA_USER_API_FSEEK = ffi.Pointer<
    ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.LongLong)>>;

/// \~japanese
/// @brief ファイルの現在位置を取得します
/// @param void * ユーザ定義ファイルポインタ
/// @return
/// 成功した場合、ファイルポインタの位置をバイト単位で返す。
/// 失敗した場合、-1を返す。
///
/// \~english
/// @brief Gets the current position in the file.
/// @param void * A user-defined file pointer
/// @return
/// This function returns the position, in bytes, the file pointer points to if successful.
/// It returns -1 if it fails.
typedef AILIA_USER_API_FTELL = ffi
    .Pointer<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Void>)>>;

/// \~japanese
/// @brief ファイルからデータを読み込みます
/// @param void *                     読み込みデータ格納先のポインタ
/// @param  \ref AILIA_FSIZE_RETURN_TYPE     読み込みデータのバイト長さ
/// @param void *                     ユーザ定義ファイルポインタ
/// @return
/// 成功した場合、 \ref AILIA_USER_API_SUCCESS を返す。
/// 失敗した場合、 \ref AILIA_USER_API_FAILED を返す。
/// 標準APIとは異なり、返値はAILIA_USER_API_*になりますのでご注意ください。
///
/// \~english
/// @brief Reads data from the file.
/// @param void *                     A pointer to the storage location of the data to be read
/// @param  \ref AILIA_FSIZE_RETURN_TYPE     The length in bytes of the data to be read
/// @param void *                     A user-defined file pointer
/// @return
/// This function returns  \ref AILIA_USER_API_SUCCESS  if successful.
/// It returns  \ref AILIA_USER_API_FAILED  if it fails.
/// Note that unlike the standard API, the return value will be AILIA_USER_API_*.
typedef AILIA_USER_API_FREAD = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<ffi.Void>, ffi.LongLong, ffi.Pointer<ffi.Void>)>>;

/// \~japanese
/// @brief ファイルのサイズを取得します
/// @param void * ユーザ定義ファイルポインタ
/// @return
/// 成功した場合、ファイルのサイズをバイト単位で返す。
/// 失敗した場合、-1を返す。
///
/// \~english
/// @brief Gets the size of the file.
/// @param void * A user-defined file pointer
/// @return
/// This function returns the size of the file in bytes if successful.
/// It returns -1 if it fails.
typedef AILIA_USER_API_FSIZE = ffi
    .Pointer<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Void>)>>;

/// \~japanese
/// @brief ファイルを閉じます
/// @param void *  ユーザ定義ファイルポインタ
/// @return
/// 成功した場合、 \ref AILIA_USER_API_SUCCESS を返す。
/// 失敗した場合、 \ref AILIA_USER_API_FAILED を返す。
///
/// \~english
/// @brief Closes the file.
/// @param void *  A user-defined file pointer
/// @return
/// This function returns  \ref AILIA_USER_API_SUCCESS  if successful.
/// It returns  \ref AILIA_USER_API_FAILED  if it fails.
typedef AILIA_USER_API_FCLOSE
    = ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>;

/// ネットワークオブジェクトのインスタンス
final class AILIANetwork extends ffi.Opaque {}

final class _AILIAShape extends ffi.Struct {
  /// \~japanese
  /// X軸のサイズ
  ///
  /// \~english
  /// Size along the X axis
  @ffi.UnsignedInt()
  external int x;

  /// \~japanese
  /// Y軸のサイズ
  ///
  /// \~english
  /// Size along the Y axis
  @ffi.UnsignedInt()
  external int y;

  /// \~japanese
  /// Z軸のサイズ
  ///
  /// \~english
  /// Size along the Z axis
  @ffi.UnsignedInt()
  external int z;

  /// \~japanese
  /// W軸のサイズ
  ///
  /// \~english
  /// Size along the W axis
  @ffi.UnsignedInt()
  external int w;

  /// \~japanese
  /// 次元情報
  ///
  /// \~english
  /// Dimension information
  @ffi.UnsignedInt()
  external int dim;
}

typedef ailiaFileCallback = _ailiaFileCallback;
typedef AILIAShape = _AILIAShape;

final class _AILIAEnvironment extends ffi.Struct {
  /// \~japanese
  /// 環境を識別するID( ailiaCreate() の引数に与える)
  ///
  /// \~english
  /// The ID to identify the inference backend (passed to  ailiaCreate()  as an argument)
  @ffi.Int()
  external int id;

  /// \~japanese
  /// 環境の種別( \ref AILIA_ENVIRONMENT_TYPE_CPU  or BLAS or GPU)
  ///
  /// \~english
  /// The type of the inference backend ( \ref AILIA_ENVIRONMENT_TYPE_CPU , BLAS, or GPU)
  @ffi.Int()
  external int type;

  /// \~japanese
  /// デバイス名(シングルトンで保持されており開放不要)(ASCII)
  ///
  /// \~english
  /// The device name. It is valid until the AILIANetwork instance is destroyed.
  external ffi.Pointer<ffi.Char> name;

  /// \~japanese
  /// 環境のバックエンド (AILIA_ENVIRONMENT_BACKEND_*)
  ///
  /// \~english
  /// Computational (hardware) backend enabled by this environment (AILIA_ENVIRONMENT_BACKEND_*)
  @ffi.Int()
  external int backend;

  /// \~japanese
  /// 環境の特性などを示す(AILIA_ENVIRONMENT_PROPERTY_* の論理和)
  ///
  /// \~english
  /// Additional property (low-power etc) of the environment (Logical-OR of AILIA_ENVIRONMENT_PROPERTY_*)
  @ffi.Int()
  external int props;
}

typedef AILIAEnvironment = _AILIAEnvironment;

/// トークナイズオブジェクトのインスタンス
final class AILIATokenizer extends ffi.Opaque {}

const int AILIA_USER_API_SUCCESS = 0;

const int AILIA_USER_API_FAILED = -1;

const int AILIA_FILE_CALLBACK_VERSION = 1;

const int AILIA_STATUS_SUCCESS = 0;

const int AILIA_STATUS_INVALID_ARGUMENT = -1;

const int AILIA_STATUS_ERROR_FILE_API = -2;

const int AILIA_STATUS_INVALID_VERSION = -3;

const int AILIA_STATUS_BROKEN = -4;

const int AILIA_STATUS_MEMORY_INSUFFICIENT = -5;

const int AILIA_STATUS_THREAD_ERROR = -6;

const int AILIA_STATUS_INVALID_STATE = -7;

const int AILIA_STATUS_UNSUPPORT_NET = -9;

const int AILIA_STATUS_INVALID_LAYER = -10;

const int AILIA_STATUS_INVALID_PARAMINFO = -11;

const int AILIA_STATUS_NOT_FOUND = -12;

const int AILIA_STATUS_GPU_UNSUPPORT_LAYER = -13;

const int AILIA_STATUS_GPU_ERROR = -14;

const int AILIA_STATUS_UNIMPLEMENTED = -15;

const int AILIA_STATUS_PERMISSION_DENIED = -16;

const int AILIA_STATUS_EXPIRED = -17;

const int AILIA_STATUS_UNSETTLED_SHAPE = -18;

const int AILIA_STATUS_DATA_HIDDEN = -19;

const int AILIA_STATUS_DATA_REMOVED = -19;

const int AILIA_STATUS_LICENSE_NOT_FOUND = -20;

const int AILIA_STATUS_LICENSE_BROKEN = -21;

const int AILIA_STATUS_LICENSE_EXPIRED = -22;

const int AILIA_STATUS_NDIMENSION_SHAPE = -23;

const int AILIA_STATUS_OTHER_ERROR = -128;

const int AILIA_SHAPE_VERSION = 1;

const int AILIA_MULTITHREAD_AUTO = 0;

const int AILIA_ENVIRONMENT_ID_AUTO = -1;

const int AILIA_DATATYPE_UNDEFINED = 0;

const int AILIA_DATATYPE_FLOAT = 1;

const int AILIA_DATATYPE_UINT8 = 2;

const int AILIA_DATATYPE_INT8 = 3;

const int AILIA_DATATYPE_UINT16 = 4;

const int AILIA_DATATYPE_INT16 = 5;

const int AILIA_DATATYPE_INT32 = 6;

const int AILIA_DATATYPE_INT64 = 7;

const int AILIA_DATATYPE_BOOL = 9;

const int AILIA_DATATYPE_FLOAT16 = 10;

const int AILIA_DATATYPE_DOUBLE = 11;

const int AILIA_DATATYPE_UINT32 = 12;

const int AILIA_DATATYPE_UINT64 = 13;

const int AILIA_DATATYPE_BFLOAT16 = 16;

const int AILIA_ENVIRONMENT_VERSION = 2;

const int AILIA_ENVIRONMENT_TYPE_CPU = 0;

const int AILIA_ENVIRONMENT_TYPE_BLAS = 1;

const int AILIA_ENVIRONMENT_TYPE_GPU = 2;

const int AILIA_ENVIRONMENT_TYPE_REMOTE = 3;

const int AILIA_ENVIRONMENT_BACKEND_NONE = 0;

const int AILIA_ENVIRONMENT_BACKEND_CUDA = 2;

const int AILIA_ENVIRONMENT_BACKEND_MPS = 3;

const int AILIA_ENVIRONMENT_BACKEND_VULKAN = 6;

const int AILIA_ENVIRONMENT_PROPERTY_NORMAL = 0;

const int AILIA_ENVIRONMENT_PROPERTY_LOWPOWER = 1;

const int AILIA_ENVIRONMENT_PROPERTY_FP16 = 2;

const int AILIA_MEMORY_NO_OPTIMIZATION = 0;

const int AILIA_MEMORY_REDUCE_CONSTANT = 1;

const int AILIA_MEMORY_REDUCE_CONSTANT_WITH_INPUT_INITIALIZER = 2;

const int AILIA_MEMORY_REDUCE_INTERSTAGE = 4;

const int AILIA_MEMORY_REUSE_INTERSTAGE = 8;

const int AILIA_MEMORY_OPTIMAIZE_DEFAULT = 1;

const int AILIA_PROFILE_DISABLE = 0;

const int AILIA_PROFILE_AVERAGE = 1;

const int AILIA_TOKENIZER_TYPE_WHISPER = 0;

const int AILIA_TOKENIZER_TYPE_CLIP = 1;

const int AILIA_TOKENIZER_TYPE_XLM_ROBERTA = 2;

const int AILIA_TOKENIZER_TYPE_MARIAN = 3;

const int AILIA_TOKENIZER_TYPE_BERT_JAPANESE_WORDPIECE = 4;

const int AILIA_TOKENIZER_TYPE_BERT_JAPANESE_CHARACTER = 5;

const int AILIA_TOKENIZER_TYPE_T5 = 6;

const int AILIA_TOKENIZER_TYPE_ROBERTA = 7;

const int AILIA_TOKENIZER_FLAG_NONE = 0;

const int AILIA_TOKENIZER_FLAG_UTF8_SAFE = 1;
